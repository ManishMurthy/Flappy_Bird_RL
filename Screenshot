import matplotlib.pyplot as plt
import numpy as np
import os

# Create Figures directory if it doesn't exist
os.makedirs('Figures', exist_ok=True)

# 1. FLAPPY BIRD ENVIRONMENT VISUALIZATION
plt.figure(figsize=(10, 8))

# Draw background
plt.fill_between([0, 288], [0, 0], [512, 512], color='skyblue', alpha=0.3)

# Draw ground
plt.fill_between([0, 288], [450, 450], [512, 512], color='tan')

# Draw pipes
pipe_positions = [100, 200, 300]
gap_centers = [200, 250, 220]
gap_size = 100
pipe_width = 52

for pipe_x, gap_center in zip(pipe_positions, gap_centers):
    # Top pipe
    plt.fill_between(
        [pipe_x, pipe_x + pipe_width], 
        [0, 0], 
        [gap_center - gap_size/2, gap_center - gap_size/2], 
        color='green', alpha=0.7
    )
    
    # Bottom pipe
    plt.fill_between(
        [pipe_x, pipe_x + pipe_width], 
        [gap_center + gap_size/2, gap_center + gap_size/2], 
        [512, 512], 
        color='green', alpha=0.7
    )

# Draw bird
bird_x, bird_y = 50, 250
plt.scatter([bird_x], [bird_y], s=300, color='yellow', edgecolor='black', zorder=5)

# Add score
plt.text(10, 30, "Score: 2", fontsize=16, bbox=dict(facecolor='white', alpha=0.7))

# Add title and labels
plt.title('Flappy Bird Environment', fontsize=16)
plt.xlim(0, 288)
plt.ylim(512, 0)  # Invert y-axis to match game coordinates
plt.axis('off')

# Save high resolution figure
plt.tight_layout()
plt.savefig('Figures/flappy_environment.png', dpi=300, bbox_inches='tight')
plt.close()
print("Flappy Bird environment visualization saved!")

# 2. STATE REPRESENTATION DIAGRAM
plt.figure(figsize=(10, 8))

# Draw game elements
plt.fill_between([0, 288], [0, 0], [512, 512], color='skyblue', alpha=0.3)
plt.fill_between([0, 288], [450, 450], [512, 512], color='tan')

# Draw a pipe
pipe_x = 150
gap_center = 250
gap_size = 100
pipe_width = 52

# Top pipe
plt.fill_between(
    [pipe_x, pipe_x + pipe_width], 
    [0, 0], 
    [gap_center - gap_size/2, gap_center - gap_size/2], 
    color='green', alpha=0.7
)

# Bottom pipe
plt.fill_between(
    [pipe_x, pipe_x + pipe_width], 
    [gap_center + gap_size/2, gap_center + gap_size/2], 
    [512, 512], 
    color='green', alpha=0.7
)

# Bird
bird_x, bird_y = 50, 220
plt.scatter([bird_x], [bird_y], s=300, color='yellow', edgecolor='black', zorder=5)

# Add state feature arrows and labels
# 1. Bird's vertical position
plt.annotate('s₁: Bird position', 
             xy=(bird_x, bird_y), 
             xytext=(bird_x - 40, 150),
             arrowprops=dict(facecolor='blue', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 2. Bird's velocity
plt.annotate('s₂: Bird velocity', 
             xy=(bird_x, bird_y+15), 
             xytext=(bird_x - 40, 100),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 3. Horizontal distance to next pipe
plt.annotate('s₃: Horizontal distance\nto next pipe', 
             xy=(bird_x + 40, bird_y), 
             xytext=(100, 100),
             arrowprops=dict(facecolor='green', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 4. Height difference to top pipe
plt.annotate('s₄: Height difference\nto top pipe', 
             xy=(pipe_x + pipe_width/2, gap_center - gap_size/2), 
             xytext=(200, 150),
             arrowprops=dict(facecolor='purple', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 5. Height difference to bottom pipe
plt.annotate('s₅: Height difference\nto bottom pipe', 
             xy=(pipe_x + pipe_width/2, gap_center + gap_size/2), 
             xytext=(200, 350),
             arrowprops=dict(facecolor='orange', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# Add title
plt.title('State Representation for Flappy Bird', fontsize=16)
plt.xlim(0, 288)
plt.ylim(512, 0)  # Invert y-axis
plt.axis('off')

# Save high resolution figure
plt.tight_layout()
plt.savefig('Figures/state_representation.png', dpi=300, bbox_inches='tight')
plt.close()
print("State representation diagram saved!")

# 3. REWARD STRUCTURE VISUALIZATION
plt.figure(figsize=(12, 8))

# Draw game elements
plt.fill_between([0, 400], [0, 0], [512, 512], color='skyblue', alpha=0.3)
plt.fill_between([0, 400], [450, 450], [512, 512], color='tan')

# Draw pipes at different positions to illustrate bird's journey
pipe_positions = [50, 150, 250, 350]
gap_centers = [220, 270, 230, 250]
gap_size = 100
pipe_width = 52

for i, (pipe_x, gap_center) in enumerate(zip(pipe_positions, gap_centers)):
    alpha = 1.0 if i == 1 else 0.5  # Highlight the middle pipe
    
    # Top pipe
    plt.fill_between(
        [pipe_x, pipe_x + pipe_width], 
        [0, 0], 
        [gap_center - gap_size/2, gap_center - gap_size/2], 
        color='green', alpha=alpha
    )
    
    # Bottom pipe
    plt.fill_between(
        [pipe_x, pipe_x + pipe_width], 
        [gap_center + gap_size/2, gap_center + gap_size/2], 
        [512, 512], 
        color='green', alpha=alpha
    )

# Draw bird trajectory
trajectory_x = np.linspace(20, 380, 30)
trajectory_y = 230 + 30 * np.sin(trajectory_x / 30)

# Plot bird at different positions
for i, (x, y) in enumerate(zip(trajectory_x[::6], trajectory_y[::6])):
    if i == 2:  # Bird passing through pipe
        plt.scatter([x], [y], s=300, color='yellow', edgecolor='black', zorder=5)
    else:
        plt.scatter([x], [y], s=200, color='yellow', edgecolor='black', alpha=0.5, zorder=5)

# Connect birds with line to show trajectory
plt.plot(trajectory_x, trajectory_y, 'k--', alpha=0.5)

# Add reward annotations
# Survival reward
plt.annotate('+0.1 per frame\n(survival reward)', 
             xy=(trajectory_x[3], trajectory_y[3]), 
             xytext=(trajectory_x[3] - 50, trajectory_y[3] - 80),
             arrowprops=dict(facecolor='blue', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# Passing pipe reward
plt.annotate('+1.0\n(passing pipe)', 
             xy=(150 + pipe_width, gap_centers[1]), 
             xytext=(150 + pipe_width + 20, gap_centers[1] - 40),
             arrowprops=dict(facecolor='green', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# Collision penalty
plt.annotate('-1.0\n(collision penalty)', 
             xy=(350, 450), 
             xytext=(320, 380),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# Add title
plt.title('Reward Structure in Flappy Bird Environment', fontsize=16)
plt.xlim(0, 400)
plt.ylim(512, 0)  # Invert y-axis
plt.axis('off')

# Save high resolution figure
plt.tight_layout()
plt.savefig('Figures/reward_structure.png', dpi=300, bbox_inches='tight')
plt.close()
print("Reward structure visualization saved!")

# 4. COLLISION DETECTION VISUALIZATION
plt.figure(figsize=(10, 8))

# Draw game elements
plt.fill_between([0, 288], [0, 0], [512, 512], color='skyblue', alpha=0.3)
plt.fill_between([0, 288], [450, 450], [512, 512], color='tan')

# Draw a pipe
pipe_x = 80
gap_center = 250
gap_size = 100
pipe_width = 52

# Top pipe
plt.fill_between(
    [pipe_x, pipe_x + pipe_width], 
    [0, 0], 
    [gap_center - gap_size/2, gap_center - gap_size/2], 
    color='green', alpha=0.7
)

# Bottom pipe
plt.fill_between(
    [pipe_x, pipe_x + pipe_width], 
    [gap_center + gap_size/2, gap_center + gap_size/2], 
    [512, 512], 
    color='green', alpha=0.7
)

# Draw collision scenarios
# 1. Bird hitting top pipe
bird_x1, bird_y1 = 85, gap_center - gap_size/2 - 10
plt.scatter([bird_x1], [bird_y1], s=300, color='yellow', edgecolor='red', linewidth=2, zorder=5)
plt.annotate('Collision with\ntop pipe', 
             xy=(bird_x1, bird_y1), 
             xytext=(bird_x1 - 60, bird_y1 - 50),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 2. Bird hitting bottom pipe
bird_x2, bird_y2 = 110, gap_center + gap_size/2 + 15
plt.scatter([bird_x2], [bird_y2], s=300, color='yellow', edgecolor='red', linewidth=2, zorder=5)
plt.annotate('Collision with\nbottom pipe', 
             xy=(bird_x2, bird_y2), 
             xytext=(bird_x2 + 50, bird_y2 + 40),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 3. Bird hitting ground
bird_x3, bird_y3 = 200, 445
plt.scatter([bird_x3], [bird_y3], s=300, color='yellow', edgecolor='red', linewidth=2, zorder=5)
plt.annotate('Collision with ground', 
             xy=(bird_x3, bird_y3), 
             xytext=(bird_x3 - 40, bird_y3 - 50),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# 4. Bird successfully passing through
bird_x4, bird_y4 = 85, gap_center
plt.scatter([bird_x4], [bird_y4], s=300, color='yellow', edgecolor='green', linewidth=2, zorder=5)
plt.annotate('Successful navigation', 
             xy=(bird_x4, bird_y4), 
             xytext=(bird_x4 - 70, bird_y4 + 60),
             arrowprops=dict(facecolor='green', shrink=0.05, width=1.5),
             bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.7))

# Draw collision boxes for visualization
# Bird hitboxes
for bx, by in [(bird_x1, bird_y1), (bird_x2, bird_y2), (bird_x3, bird_y3), (bird_x4, bird_y4)]:
    bird_width, bird_height = 34, 24
    rect = plt.Rectangle((bx - bird_width/2, by - bird_height/2), bird_width, bird_height, 
                         fill=False, edgecolor='red' if by != bird_y4 else 'green', linestyle='--')
    plt.gca().add_patch(rect)

# Add title
plt.title('Collision Detection in Flappy Bird', fontsize=16)
plt.xlim(0, 288)
plt.ylim(512, 0)  # Invert y-axis
plt.axis('off')

# Save high resolution figure
plt.tight_layout()
plt.savefig('Figures/collision_detection.png', dpi=300, bbox_inches='tight')
plt.close()
print("Collision detection visualization saved!")

print("\nAll environment-related visualizations completed and saved in high resolution!")